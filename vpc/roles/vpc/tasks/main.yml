---
 - name: VPC+SG+SUBNETS+Instances provision
   local_action:
     module: ec2_vpc
     region: '{{ aws_region }}'
     cidr_block: '{{aws_vpc}}'
     resource_tags: '{"Name":"'{{ aws_prefix }}'_vpc"}'
     subnets:
       - cidr: '{{aws_subnet}}'
        #  az: "{{ aws_az0 }}"
         resource_tags: '{"Name":"'{{ aws_prefix }}'_net_1a"}'
      #  - cidr: 10.0.2.64/26
      #    az: "{{ aws_az1 }}"
      #    resource_tags: '{"Name":"{{ aws_prefix }}_net_1b"}'
      #  - cidr: 10.0.2.128/26
      #    az: "{{ aws_az2 }}"
      #    resource_tags: '{"Name":"{{ aws_prefix }}_net_1c"}'
     internet_gateway: yes
     route_tables:
       - subnets:
           - '{{aws_subnet}}'
         routes:
           - dest: 0.0.0.0/0
             gw: igw
   register: vpc
 - name: write vpc id to {{ aws_prefix }}_vpc_info file
   sudo: yes
   local_action: shell echo '{{ aws_prefix }}'_vpc":" '{{ vpc.vpc_id }}'
                   > '{{ aws_prefix }}'_vpc_info
 - name: write subnets id to {{ aws_prefix }}_vpc_info file
   sudo: yes
   local_action: shell echo '{{ item.resource_tags.Name }}''":" '{{ item.id }}'
                   >> '{{ aws_prefix }}'_vpc_info
   with_items: vpc.subnets
 #     key_name: "{{ ec2_keypair }}"
 #     group_id: "{{ ec2_security_group }}"
 #     instance_type: "{{ ec2_instance_type }}"
 #     image: "{{ ec2_image }}"
 #     vpc_subnet_id: "{{ ec2_subnet_ids|random }}"
 #     region: "{{ ec2_region }}"
 #     instance_tags: '{"Name":"{{ec2_tag_Name}}","Type":"{{ec2_tag_Type}}","Environment":"{{ec2_tag_Environment}}"}'
 #     assign_public_ip: yes
 #     wait: yes
 #    #  count: "{{ ec2_node_number }}"
 #    #  instance_tags:
 #    #  role: cluster_node
 #    #  exact_count: "{{ ec2_node_number }}"
 #    #  count_tag: cluster_node
 #     volumes:
 #     - device_name: /dev/sda
 #       volume_type: gp2
 #       volume_size: "{{ ec2_root_disk_size }}"
 #       delete_on_termination: true
 #     - device_name: /dev/sdb
 #       volume_type: gp2
 #       volume_size: "{{ ec2_swap_size }}"
 #       delete_on_termination: true
 #   register: ec2
 #   with_sequence: count=3
 #
 # - debug: var=item
 #   with_items: ec2.instances

 # - debug: msg="Node {{ instance_tags }} goes to {{ group_id }}"
 #  #  when: instance_tags is defined
 #   with_items: ec2.instances
 #
 # # - name: Display all variables/facts known for a host
 # #   debug: var=hostvars[inventory_hostname] verbosity=4

 # - name: Wait for the instances to boot by checking the ssh port
 #   wait_for: host={{item.public_ip}} port=22 delay=60 timeout=320 state=started
 #   with_items: ec2.instances
