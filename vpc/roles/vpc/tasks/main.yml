---
 - name: VPC+SUBNETS provision
   local_action:
     module: ec2_vpc
     region: '{{aws_region}}'
     cidr_block: '{{aws_vpc}}'
     resource_tags: '{"Name":"{{aws_prefix}}_vpc"}'
     subnets:
       - cidr: '{{aws_subnet}}'
        #  az: "{{ aws_az0 }}"
         resource_tags: '{"Name":"{{aws_prefix}}_net_1a"}'
      #  - cidr: 10.0.2.64/26
      #    az: "{{ aws_az1 }}"
      #    resource_tags: '{"Name":"{{ aws_prefix }}_net_1b"}'
      #  - cidr: 10.0.2.128/26
      #    az: "{{ aws_az2 }}"
      #    resource_tags: '{"Name":"{{ aws_prefix }}_net_1c"}'
     internet_gateway: yes
     route_tables:
       - subnets:
           - '{{aws_subnet}}'
         routes:
           - dest: 0.0.0.0/0
             gw: igw
   register: vpc
 - name: write vpc id to {{aws_prefix}}_vpc_info file
  #  sudo: yes
   become: true
   local_action: shell echo "{{aws_prefix}}"_vpc":" "{{vpc.vpc_id}}"
                   > '{{aws_prefix}}'_vpc_info
 - name: write subnets id to {{aws_prefix}}_vpc_info file
   become: true
   local_action: shell echo "{{item.resource_tags.Name}}"":" "{{item.id}}"
                   >> '{{aws_prefix}}'_vpc_info
   with_items: '{{vpc.subnets}}'

 - name: SG provision
   local_action:
     module: ec2_group
     region: '{{aws_region}}'
     vpc_id: '{{vpc.vpc_id}}'
     # your security group name
     name: '{{aws_prefix}}_sg'
     description: security group for HDP cluster
     rules:
       # Allow to ping hosts
       - proto: icmp
         # from_port: 8 # icmp type, -1 = any type
         from_port: -1
         to_port:  -1
         cidr_ip: 0.0.0.0/0
        #  group_id: '{{name}}'
       # Allow ssh access from anywhere
       - proto: tcp
         from_port: 22
         to_port: 22
         cidr_ip: 0.0.0.0/0
       # Allow some access for test from anywhere
       # - proto: tcp
       #   from_port: 2222
       #   to_port: 2222
       #   cidr_ip: 0.0.0.0/0
       # Allow http access from anywhere
       - proto: tcp
         from_port: 80
         to_port: 80
         cidr_ip: 0.0.0.0/0
     rules_egress:
       - proto: all
         cidr_ip: 0.0.0.0/0
   register: sg
  # - name: write rules to {{aws_prefix}}_vpc_info file
  #   become: true
  #   local_action: shell echo "{{item.resource_tags.Name}}"":" "{{item.id}}"
  #                   >> '{{aws_prefix}}'_vpc_info
  #   with_items: '{{vpc.rules}}'

 - name: Provision nodes for HDP cluster in dedicated VPC
   local_action:
     module: ec2
     key_name: '{{ec2_keypair}}'
     group_id: '{{sg.group_id}}'
     #group: '{{aws_prefix}}_sg'
     instance_type: '{{ec2_instance_type}}'
     image: '{{ec2_image}}'
     #vpc_subnet_id: '{{ec2_subnet_ids|random}}'
     vpc_subnet_id: '{{subnet.id}}'
     region: '{{aws_region}}'
     instance_tags: '{"Name":"{{ec2_tag_Name}}","Type":"{{ec2_tag_Type}}","Environment":"{{ec2_tag_Environment}}"}'
    #  instance_tags: '{"Name":"{{ec2_tag_Name}}-{{item}}","Type":"{{ec2_tag_Type}}","Environment":"{{ec2_tag_Environment}}"}'
     # assign_public_ip only available with vpc_subnet_id
    #  assign_public_ip: yes
     wait: yes
     count: '{{ec2_node_number}}'
    #  instance_tags:
    #  role: cluster_node
    #  exact_count: "{{ ec2_node_number }}"
    #  count_tag: cluster_node
     volumes:
     - device_name: /dev/sda
       volume_type: gp2
       volume_size: '{{ec2_root_disk_size}}'
       delete_on_termination: true
     - device_name: /dev/sdb
       volume_type: gp2
       volume_size: '{{ec2_swap_size}}'
       delete_on_termination: true
  #  with_sequence: count='{{ec2_node_number}}'
  #  with_sequence: count=3
   register: ec2

 - debug: var=item
   with_items: ec2.instances

 - name: Wait for the instances to boot by checking the ssh port
   wait_for: host={{item.public_ip}} port=22 delay=60 timeout=320 state=started
   with_items: ec2.instances
